{"version":3,"sources":["components/logo/logo.svg","stores/CounterStore.ts","stores/RootStore.ts","contexts/StoreProvider.tsx","components/Counter.tsx","components/logo/Logo.tsx","components/ExternalLink.tsx","components/Link.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","contexts/AppProviders.tsx","index.tsx"],"names":["module","exports","CounterStore","this","counter","observable","action","RootStore","counterStore","StoreContext","createContext","StoreProvider","children","store","useLocalStore","Provider","value","useCounterStore","useContext","Error","useStoreContext","Container","styled","div","Button","button","props","color","Label","span","Counter","observer","onClick","incrementCounter","decrementCounter","LogoAnimation","keyframes","img","Logo","src","logo","alt","a","ExternalLink","url","className","href","target","rel","aria-label","role","Link","header","Header","App","Boolean","window","location","hostname","match","AppProviders","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0GAAAA,EAAOC,QAAU,IAA0B,kC,sNCE9BC,GAAb,aAKE,aAAe,uDACbC,KAAKC,QAAU,EANnB,+DAWID,KAAKC,YAXT,yCAgBID,KAAKC,cAhBT,0CAEGC,KAFH,0GASGC,KATH,yHAcGA,KAdH,gFCAaC,EAGX,aAAe,yBAFfC,kBAEc,EACZL,KAAKK,aAAe,IAAIN,GCGfO,EAAeC,wBAAwC,MASvDC,EAAoB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC5BC,EAAQC,aARW,WAEzB,MAAO,CACLN,cAFgB,IAAID,GAEIC,iBAM1B,OAAO,kBAACC,EAAaM,SAAd,CAAuBC,MAAOH,GAClCD,IAYQK,EAAkB,kBARA,WAC7B,IAAMJ,EAAQK,qBAAWT,GACzB,IAAKI,EACH,MAAM,IAAIM,MAAJ,uDAER,OAAON,EAG0CO,GAAkBZ,c,42BC5BrE,IAAMa,EAAYC,IAAOC,IAAV,KAMTC,EAASF,IAAOG,OAAV,KAgBU,SAAAC,GAAK,OAAIA,EAAMC,SAI/BC,EAAQN,IAAOO,KAAV,KAOEC,EAAcC,aAAS,WAClC,IAAMvB,EAAeS,IAKrB,OAAO,kBAACI,EAAD,KACL,kBAACG,EAAD,CAAQQ,QAJc,kBAAMxB,EAAayB,oBAIPN,MAAM,WAAxC,KACA,kBAACC,EAAD,KAAQpB,EAAaJ,SACrB,kBAACoB,EAAD,CAAQQ,QALc,kBAAMxB,EAAa0B,oBAKPP,MAAM,WAAxC,S,8YC1CJ,IAAMQ,EAAgBC,YAAH,KASbf,EAAYC,IAAOe,IAAV,IAIEF,GAIJG,EAAW,WACtB,OAAO,kBAAC,EAAD,CAAWC,IAAKC,IAAMC,IAAI,U,0FCpBnC,IAAMpB,EAAYC,IAAOoB,EAAV,KAQFC,EAAsC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,IAAKhC,EAAe,EAAfA,SACzD,OAAO,kBAAC,EAAD,CAAWiC,UAAU,WAAWC,KAAMF,EAAKG,OAAO,SAASC,IAAI,uBACpE,0BAAMC,aAAW,gBAAgBC,KAAK,OAAtC,iBACCtC,I,0FCXL,IAAMS,EAAYC,IAAOoB,EAAV,KAQFS,EAAsB,SAAC,GAAuB,IAArBP,EAAoB,EAApBA,IAAKhC,EAAe,EAAfA,SACzC,OAAO,kBAAC,EAAD,CAAWiC,UAAU,WAAWC,KAAMF,GAC1ChC,I,+QCVL,IAAMS,EAAYC,IAAO8B,OAAV,KAWFC,EAAa,SAAC,GAAkB,IAAhBzC,EAAe,EAAfA,SAC3B,OAAO,kBAAC,EAAD,KAAYA,I,8FCPrB,IAAMS,EAAYC,IAAOC,IAAV,KAgBA+B,MAZf,WACE,OAAO,kBAAC,EAAD,KACL,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,oCAAS,6CAAT,yBACA,kBAAC,EAAD,CAAcV,IAAI,uBAAlB,eACA,kBAAC,EAAD,CAAMA,IAAI,QAAV,QACA,kBAACd,EAAD,SCPcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfC,IAAMC,EAAmB,SAAC,GAAkB,IAAhBhD,EAAe,EAAfA,SACjC,OAAO,kBAAC,EAAD,KACJA,ICELiD,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SF8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.97eea243.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { action, observable } from 'mobx';\n\nexport class CounterStore {\n\n  @observable\n  counter: number;\n\n  constructor() {\n    this.counter = 0;\n  }\n\n  @action\n  incrementCounter() {\n    this.counter++;\n  }\n\n  @action\n  decrementCounter() {\n    this.counter--;\n  }\n}\n","import { CounterStore } from './CounterStore';\n\nexport class RootStore {\n  counterStore: CounterStore;\n\n  constructor() {\n    this.counterStore = new CounterStore();\n  }\n}\n","import React, { createContext, FC, useContext } from 'react';\nimport { useLocalStore } from 'mobx-react';\nimport { RootStore } from '../stores/RootStore';\nimport { CounterStore } from '../stores/CounterStore';\n\nexport interface StoreContextProps {\n  counterStore: CounterStore;\n}\n\nexport const StoreContext = createContext<StoreContextProps | null>(null);\n\nconst createStores = () => (): StoreContextProps => {\n  const rootStore = new RootStore();\n  return {\n    counterStore: rootStore.counterStore\n  };\n};\n\nexport const StoreProvider: FC = ({ children }) => {\n  const store = useLocalStore(createStores());\n  return <StoreContext.Provider value={store}>\n    {children}\n  </StoreContext.Provider>;\n};\n\nexport const useStoreContext = (): StoreContextProps => {\n  const store = useContext(StoreContext);\n  if (!store) {\n    throw new Error(`useStoreContext must be used within a StoreProvider`);\n  }\n  return store;\n};\n\nexport const useCounterStore = (): CounterStore => useStoreContext().counterStore;\n","import React, { FC } from 'react';\nimport { observer } from 'mobx-react';\nimport { useCounterStore } from '../contexts/StoreProvider';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 10px;\n`;\n\nconst Button = styled.button`\n  -webkit-font-smoothing: antialiased;\n  text-rendering: optimizeLegibility;\n  display: inline-block;\n  border: none;\n  border-radius: .3em;\n  box-shadow: inset 0 0 0 1px rgba(0, 0, 0, 0.1), inset 0 -0.25em 0 rgba(0, 0, 0, 0.25), 0 0.25em 0.25em rgba(0, 0, 0, 0.05);\n  color: #fff;\n  cursor: pointer;\n  font-weight: 400;\n  line-height: 1.5;\n  padding: .5em 1.5em .75em;\n  position: relative;\n  vertical-align: middle;\n  user-select: none;\n  font-size: 0.75em;\n  background-color: ${props => props.color};\n  margin: 5px;\n`;\n\nconst Label = styled.span`\n  font-size: 3em;\n  margin: 10px;\n  min-width: 100px;\n  user-select: none;\n`;\n\nexport const Counter: FC = observer(() => {\n  const counterStore = useCounterStore();\n\n  const handleIncrement = () => counterStore.incrementCounter();\n  const handleDecrement = () => counterStore.decrementCounter();\n\n  return <Container>\n    <Button onClick={handleIncrement} color=\"#1199EE\">+</Button>\n    <Label>{counterStore.counter}</Label>\n    <Button onClick={handleDecrement} color=\"#EE4444\">-</Button>\n  </Container>;\n});\n","import React, { FC } from 'react';\nimport logo from './logo.svg';\nimport styled from '@emotion/styled';\nimport { keyframes } from 'emotion';\n\nconst LogoAnimation = keyframes`\n from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n`;\n\nconst Container = styled.img`\n  height: 40vmin;\n  pointer-events: none;\n  @media (prefers-reduced-motion: no-preference) {\n    animation: ${LogoAnimation} infinite 20s linear;\n  }\n`;\n\nexport const Logo: FC = () => {\n  return <Container src={logo} alt=\"logo\" />;\n};\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nconst Container = styled.a`\n  color: #61dafb;\n`;\n\ninterface ExternalLinkProps {\n  url: string;\n}\n\nexport const ExternalLink: FC<ExternalLinkProps> = ({ url, children }) => {\n  return <Container className=\"App-link\" href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n    <span aria-label=\"External link\" role=\"img\">ðŸ‘‹ </span>\n    {children}\n  </Container>;\n};\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nconst Container = styled.a`\n  color: #61dafb;\n`;\n\ninterface LinkProps {\n  url: string;\n}\n\nexport const Link: FC<LinkProps> = ({ url, children }) => {\n  return <Container className=\"App-link\" href={url}>\n    {children}\n  </Container>;\n};\n","import React, { FC } from 'react';\nimport styled from '@emotion/styled';\n\nconst Container = styled.header`\n  background-color: #282c34;\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  font-size: calc(10px + 2vmin);\n  color: white;\n`;\n\nexport const Header: FC = ({ children }) => {\n  return <Container>{children}</Container>;\n};\n","import React from 'react';\nimport { Counter } from './components/Counter';\nimport { Logo } from './components/logo/Logo';\nimport { ExternalLink } from './components/ExternalLink';\nimport { Link } from './components/Link';\nimport { Header } from './components/Header';\nimport styled from '@emotion/styled';\n\nconst Container = styled.div`\n  text-align: center;\n`;\n\nfunction App() {\n  return <Container>\n    <Header>\n      <Logo />\n      <p> Edit <code>src/App.tsx</code> and save to reload. </p>\n      <ExternalLink url=\"https://reactjs.org\">Learn React</ExternalLink>\n      <Link url=\"home\">Home</Link>\n      <Counter />\n    </Header>\n  </Container>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { FC } from 'react';\nimport { StoreProvider } from './StoreProvider';\n\nexport const AppProviders: FC = ({ children }) => {\n  return <StoreProvider>\n    {children}\n  </StoreProvider>;\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { AppProviders } from './contexts/AppProviders';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppProviders>\n      <App />\n    </AppProviders>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}